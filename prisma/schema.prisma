generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  firstName    String
  lastName     String
  role         Role      @default(CUSTOMER)
  phone        String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  address      Address[]
  orders       Order[]

  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  commune   String
  province  String
  region    String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  orders    Order[]

  @@map("addresses")
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  slug        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Product[]
  parentId    String?
  parent      Category?  @relation("CategorySubcategories", fields: [parentId], references: [id])
  children    Category[] @relation("CategorySubcategories")

  @@map("categories")
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Int
  stock       Int            @default(0)
  slug        String         @unique
  attributes  Json? // Para atributos específicos de moscas (tamaño, tipo, materiales)
  isFeatured  Boolean        @default(false)
  discount    Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  images      ProductImage[]
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  isMain    Boolean  @default(false)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Order {
  id             String         @id @default(uuid())
  status         OrderStatus    @default(PENDING)
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus  @default(PENDING)
  shippingMethod ShippingMethod
  shippingStatus ShippingStatus @default(PENDING)
  shippingCost   Int
  subtotal       Int
  discount       Int?           @default(0)
  total          Int
  notes          String?
  trackingNumber String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  addressId      String
  address        Address        @relation(fields: [addressId], references: [id])
  items          OrderItem[]

  @@map("orders")
}

model OrderItem {
  id String @id @default(uuid())
  quantity Int
  price Int
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  WEB_PAY
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  PICKUP
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
}